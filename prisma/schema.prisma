generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id                      Int                   @id @default(autoincrement())
  email                   String                @unique
  name                    String
  password                String
  active                  Boolean               @default(true)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  userCreatorClient        Client[]             @relation("user_creator_client")
  userUpdaterClient        Client[]             @relation("user_updater_client")

  userCreatorProject       Project[]            @relation("user_creator_project")
  userUpdaterProject       Project[]            @relation("user_updater_project")

  userCreatorComment       Comment[]            @relation("user_creator_comment")
  userUpdaterComment       Comment[]            @relation("user_updater_comment")

  userCreatorEvent         Event[]              @relation("user_creator_event")
  userUpdaterEvent         Event[]              @relation("user_updater_event")

  userCreatorSubscription  Subscription[] @relation("user_creator_subscription")
  userUpdaterSubscription  Subscription[] @relation("user_updater_subscription")

  subscriptions            Subscription[]
}

model Subscription {
  id              Int      @id @default(autoincrement())
  subscription    String
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  createdById     Int
  createdBy       User     @relation(fields: [createdById], references: [id], name: "user_creator_subscription")
  updatedAt       DateTime @updatedAt
  updatedById     Int?
  updatedBy       User?    @relation(fields: [updatedById], references: [id], name: "user_updater_subscription")

  userId          Int
  user            User     @relation(fields: [userId], references: [id])
}


model Client {
  id              Int        @id @default(autoincrement())
  name            String     
  phone           String     @unique
  email           String
  status          String
  birthdate       DateTime?  @db.Date
  reasonRejection String?    @default("")
  origin          String?    @default("")
  campaignType    String?    @default("")
  active          Boolean    @default(true)
  createdAt       DateTime   @default(now())
  createdById     Int
  createdBy       User       @relation(fields: [createdById], references: [id], name: "user_creator_client")
  updatedAt       DateTime   @updatedAt
  updatedById     Int?
  updatedBy       User?      @relation(fields: [updatedById], references: [id], name: "user_updater_client")

  projects        Project[]
  comments        Comment[]
  events          Event[]
}

model Project {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  createdById Int
  createdBy   User       @relation(fields: [createdById], references: [id], name: "user_creator_project")
  updatedAt   DateTime   @updatedAt
  updatedById Int?
  updatedBy   User?      @relation(fields: [updatedById], references: [id], name: "user_updater_project")

  clients     Client[]
  events      Event[]
}

model Comment {
  id          Int        @id @default(autoincrement())
  comment     String
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  createdById Int
  createdBy   User       @relation(fields: [createdById], references: [id], name: "user_creator_comment")
  updatedAt   DateTime   @updatedAt
  updatedById Int?
  updatedBy   User?      @relation(fields: [updatedById], references: [id], name: "user_updater_comment")

  clientId    Int
  client      Client     @relation(fields: [clientId], references: [id])
}

model Event {
  id          Int        @id @default(autoincrement())
  date        DateTime   
  comment     String
  type        String
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  createdById Int
  createdBy   User       @relation(fields: [createdById], references: [id], name: "user_creator_event")
  updatedAt   DateTime   @updatedAt
  updatedById Int?
  updatedBy   User?      @relation(fields: [updatedById], references: [id], name: "user_updater_event")

  client      Client     @relation(fields: [clientId], references: [id])
  clientId    Int

  project     Project     @relation(fields: [projectId], references: [id])
  projectId    Int
}